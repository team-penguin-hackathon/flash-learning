from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, IntegerField
from wtforms.validators import DataRequired, Email, ValidationError
<<<<<<< HEAD:flash_learning/models/forms.py
from flask_login import UserMixin
from flask_sqlalchemy import SQLAlchemy
import re
from flask import flash
from flash_learning.models.user import User
=======

from flash_learning.models.student import Student
>>>>>>> e80ee6856daf2e6a7d81ba9db58ec76fa1103343:flash_learning/main/forms.py



class LoginForm(FlaskForm):
    username = StringField('username', validators=[DataRequired()])
    password = PasswordField('password', validators=[DataRequired()])
    submit = SubmitField("Sign In")
def check_password(form, field):
    if len(field.data) < 8:
        flash("Field must greater than 4 character")
        raise ValidationError('Password must greater than 4 character')
    if re.search("[0-9]",field.data)!=None:
        length=len(field.data)
        index=0
        count=1
        while index<length-1:
            num1=field.data[index]
            num2 = field.data[index+1]
            #convert to int
            if ord(num1) > 47 and ord(num1) < 58:
                num1 = int(num1)
            num2 = field.data[index + 1]
            if ord(num2) > 47 and ord(num2) < 58:
                num2 = int(num2)
            index = index + 1
            #check if conversation susccesful
            if type(num1)!=int or type(num2)!=int:
                count=1
                continue
            #check if incrementing
            if num1+1==num2 or num1==num2:
                count=count+1
            else:
                count=1
            if count==3:
                flash("Password can't not increment or have repeating numbers")
                raise ValidationError("Password can't not have incrementing numbers")
    if re.search("password",field.data,re.IGNORECASE)!=None and  re.search("password",field.data,re.IGNORECASE).start()==0:
        flash("Password can not start with  the word Password[case-insenstive]")
        raise ValidationError('weak password')
    if len(re.findall("[A-Z]", field.data, re.IGNORECASE))==0:
        flash("Password must contain at least 1 letter")
        raise ValidationError('At least 1 letter')
    if len(re.findall("[0-9]",field.data))==0:
        flash("Password must contain at least 1 number")
        raise ValidationError('At least 1 number')
    if (len(re.findall("[A-Z]",field.data,re.IGNORECASE))+len(re.findall("[0-9]",field.data)))==len(field.data):
        flash("Password must contain at least 1 symbol")
        raise ValidationError('At least 1 symbol')
    if re.search(form.username.data,field.data,re.IGNORECASE)!=None:
        flash("Password Can Not Contain User Name")
        raise ValidationError("User Name  Can't be in Password")


class SignupForm(FlaskForm):
    first_name = StringField('first_name', validators=[DataRequired()])
    last_name = StringField('last_name', validators=[DataRequired()])
    username = StringField('username', validators=[DataRequired()])
<<<<<<< HEAD:flash_learning/models/forms.py
    password = PasswordField('password', validators=[DataRequired(),check_password])
    email = StringField('email', validators=[DataRequired(), Email()])
    school = StringField(label='school', validators=[DataRequired()])
=======
>>>>>>> e80ee6856daf2e6a7d81ba9db58ec76fa1103343:flash_learning/main/forms.py
    grade = IntegerField('grade', validators=[DataRequired()])
    email = StringField('email', validators=[DataRequired(), Email()])
    password = PasswordField('password', validators=[DataRequired()])
    submit = SubmitField("Sign Up")



    def validate_username(self, username):
        """Check if the username is already taken."""

        user = Student.query.filter_by(username=username.data).first()
        if user is not None:
            raise ValidationError("Please use a different username.")


    def validate_email(self, email):
        """Check if the email is already tied to an account."""

        email = Student.query.filter_by(email=email.data).first()
        if email is not None:
            raise ValidationError("Please use a different email address.")
